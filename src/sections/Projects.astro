---
import BlockDecoration from '@/components/BlockDecoration.astro'
import FiltersPanel from '@/components/FiltersPanel.astro'
import { projectsList } from '@/data/site-data'
import DiagonalArrow from '@/assets/diagonalArrow.svg'
---

<section id="projects">
  <FiltersPanel />

  <div class="relative">
    <div id="projects-wrapper" class="2md:gap-x-20 1.5md:grid-cols-2 grid gap-x-10 gap-y-12 p-10">
      {
        projectsList.toReversed().map((project) => {
          const { details, category, cover, description, stack } = project

          return (
            <div
              data-category={category}
              data-title={details[0].value}
              class="project bg-light border-grey group flex flex-col border"
            >
              <div class="relative">
                <div class="xs:p-10 p-5 md:p-5 lg:p-8 xl:p-10">
                  <div class="size-full overflow-hidden">
                    <img
                      class="grayscale-50 pointer-coarse:grayscale-0 aspect-video w-full object-cover transition-all duration-300 group-hover:scale-105 group-hover:grayscale-0"
                      src={cover}
                      alt={details[0].value}
                    />
                  </div>
                </div>

                <div class="text-lightergrey absolute inset-0">
                  <BlockDecoration />
                </div>
              </div>
              <div class="relative flex-1">
                <footer class="text-dark-60 border-t-grey xs:divide-y-0 divide-grey xs:grid-cols-2 xs:grid-rows-2 grid grid-rows-[1fr_auto_auto] divide-y border-t text-center text-sm">
                  {details.map((detail) => {
                    return (
                      <>
                        {detail.type === 'link' ? (
                          <a
                            class="hover:text-dark hover:bg-primary focus:bg-primary focus:text-dark pointer-coarse:text-dark xs:h-auto flex size-full h-min items-center justify-center gap-2 px-4 py-7 text-left transition-colors duration-300 hover:[&>svg]:-translate-y-1 hover:[&>svg]:translate-x-1"
                            href={detail.value}
                            target="_blank"
                            rel="noopener noreferrer"
                          >
                            <span>{detail.label}</span>
                            <DiagonalArrow class="h-auto w-2 transition-transform duration-300" />
                          </a>
                        ) : (
                          <div class="xs:col-span-2 flex flex-col gap-2 px-4 py-7 text-left xl:col-span-1 xl:row-span-2">
                            <span class="text-dark">{detail.value}</span>
                            <span class="text-balance text-xs">{description}</span>
                            {/* STACK */}
                            <div class="mt-2 flex gap-3">
                              {stack?.map((Icon) => {
                                return (
                                  <div class="relative">
                                    <Icon className="hover:text-dark text-base peer" />
                                    <span class="bg-light text-dark border-lightergrey pointer-events-none absolute bottom-[150%] left-1/2 inline-block -translate-x-1/2 translate-y-2 border px-2 py-1 text-xs uppercase opacity-0 transition-all duration-300 peer-hover:translate-y-0 peer-hover:opacity-100">
                                      {Icon.name.replace('Si', '')}
                                    </span>
                                  </div>
                                )
                              })}
                            </div>
                          </div>
                        )}
                      </>
                    )
                  })}
                </footer>

                <div
                  aria-hidden="true"
                  class="xs:flex pointer-events-none absolute inset-0 hidden w-full justify-center"
                >
                  <div class="bg-grey absolute inset-y-0 left-1/2 top-1/2 w-[1px] xl:top-0" />
                  <div class="bg-grey absolute inset-x-0 left-0 top-1/2 h-[1px] xl:left-1/2" />
                </div>
              </div>
            </div>
          )
        })
      }
    </div>
  </div>
</section>

<script>
  import { $, $$ } from '@/lib/dom-selector'
  import { debounce } from '@/lib/utils'

  const form = $('#filters-form')
  const projectsWrapper = $('#projects-wrapper') as HTMLElement
  const searchInput = $('#search') as HTMLInputElement

  // Init state of filters
  let currentCategory = 'all'
  let currentSearch = ''

  // When change category
  form?.addEventListener('change', (e) => {
    const target = e.target as HTMLInputElement
    console.log(target.type)
    if (target.type === 'radio' || target.type === 'select-one') {
      currentCategory = target.value
      filterProjects()
    }
  })

  // Búsqueda con debounce
  searchInput?.addEventListener(
    'input',
    debounce((e: Event) => {
      currentSearch = (e.target as HTMLInputElement).value.toLowerCase().trim()
      filterProjects()
    }, 300),
  )

  // La función que aplica ambos filtros
  function filterProjects() {
    for (const projectNode of projectsWrapper.children) {
      const project = projectNode as HTMLElement
      const cat = project.dataset.category
      const title = (project.dataset.title || project.textContent || '').toLowerCase()

      const matchesCategory = currentCategory === 'all' || cat === currentCategory
      const matchesSearch = !currentSearch || title.includes(currentSearch)

      const show = matchesCategory && matchesSearch

      project.classList.toggle('hidden', !show)
      project.setAttribute('aria-hidden', !show ? 'true' : 'false')
    }

    updateResultsCount()
  }

  function updateResultsCount() {
    const shown = $$('.project:not(.hidden)')
    const elementTotalProjects = $('#total-projects') as HTMLElement
    elementTotalProjects.textContent = `${shown.length}`.padStart(2, '0')
  }

  filterProjects()
</script>
